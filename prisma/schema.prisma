datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String          @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Authenticator Authenticator[]
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @id @map("_id")
    userId               String  @db.ObjectId
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}

model Member {
    id              String           @id @default(auto()) @map("_id") @db.ObjectId
    activeAccountId String?          @db.ObjectId
    userId          String?
    firstName       String
    lastName        String
    surName         String
    mobileNumber    String           @unique
    IdNumber        String           @unique
    email           String           @unique
    address         String
    occupation      String
    savingsAccounts SavingsAccount[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

model SavingsAccount {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    memberId       String    @db.ObjectId
    name           String
    accountType    String
    minimumSavings Float
    loanLimit      Float
    advanceLimit   Float
    shareCapital   Float
    savingsBalance Float
    loanBalance    Float
    advanceBalance Float
    bonus          Float
    project        Float
    walfare        Float
    member         Member    @relation(fields: [memberId], references: [id])
    payments       Payment[]
    loans          Loan[]
    advances       Advance[]
    bonuses        Bonus[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
}

model Payment {
    id                     String         @id @default(auto()) @map("_id") @db.ObjectId
    savingsAccountId       String         @db.ObjectId
    totalRepaid            Float
    sharesBroughtForward   Float
    loansBroughtForward    Float
    advancesBroughtForward Float
    shareCapital           Float
    loanPrinciple          Float
    interest               Float
    monthlySavings         Float
    walfare                Float
    sharesCarriedForward   Float
    loansCarriedForward    Float
    advancesCarriedForward Float
    savingsAccount         SavingsAccount @relation(fields: [savingsAccountId], references: [id])
    createdAt              DateTime       @default(now())
    updatedAt              DateTime       @updatedAt
}

model Loan {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    savingsAccountId String         @db.ObjectId
    principle        Float
    paymentPeriod    Int
    monthlyPayment   Float
    interest         Float
    guarantors       Json
    status           String
    savingsAccount   SavingsAccount @relation(fields: [savingsAccountId], references: [id])
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
}

model Advance {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    savingsAccountId String         @db.ObjectId
    principle        Float
    paymentPeriod    Int
    monthlyPayment   Float
    interest         Float
    guarantors       Json
    status           String
    savingsAccount   SavingsAccount @relation(fields: [savingsAccountId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Bonus {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    savingsAccountId String         @db.ObjectId
    bonus            Float
    project          Float
    savingsAccount   SavingsAccount @relation(fields: [savingsAccountId], references: [id])
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
}
